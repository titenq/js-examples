{
  "arrow-function": {
    "prefix": "jsarrow-function",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "function sumWithoutArrowFunction(num1, num2) {",
      "  let result = num1 + num2;",
      "",
      "  return result;",
      "}",
      "",
      "console.log(sumWithoutArrowFunction(5, 3));",
      "",
      "/* ",
      "  8",
      "*/",
      "",
      "const sumWithArrowFunction = (num1, num2) => {",
      "  let result = num1 + num2;",
      "",
      "  return result;",
      "};",
      "",
      "console.log(sumWithArrowFunction(9, 7));",
      "",
      "/* ",
      "  16",
      "*/",
      "",
      "// if return is one line, {} and return can be omitted.",
      "",
      "const sum = (num1, num2) => num1 + num2;",
      "",
      "console.log(sum(3, 9));",
      "",
      "/* ",
      "  12",
      "*/",
      "",
      "// if you have only one parameter, () can be omitted.",
      "",
      "const greeting = name => `Hello, \\${name}!`;",
      "",
      "console.log(greeting('Yoda'));",
      "",
      "/* ",
      "  Hello, Yoda!",
      "*/",
      "",
      "// if there is no parameter, () is required.",
      "",
      "const helloWorld = () => 'Hello, World!';",
      "",
      "console.log(helloWorld());",
      "",
      "/* ",
      "  Hello, World!",
      "*/"
    ],
    "description": "arrow-function"
  },

  "concat": {
    "prefix": "jsconcat",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const withoutConcat = 'Hello' + ' ' + 'World!';",
      "",
      "console.log(withoutConcat);",
      "",
      "/* ",
      "  Hello World!",
      "*/",
      "",
      "const withConcat = 'Hello'.concat(' ', 'World!');",
      "",
      "console.log(withConcat);",
      "",
      "/* ",
      "  Hello World!",
      "*/",
      "",
      "const string1 = 'Hello';",
      "const string2 = 'World!';",
      "const stringWithConcat = string1.concat(' ', string2);",
      "",
      "console.log(stringWithConcat);",
      "",
      "/* ",
      "  Hello World!",
      "*/"
    ],
    "description": "concat"
  },

  "default parameters": {
    "prefix": "jsdefault-parameters",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const greetingWithoutDefaultParameters = name => `Hello, ${name}!`;",
      "",
      "console.log(greetingWithoutDefaultParameters('Thomas Anderson'));",
      "",
      "/* ",
      "  Hello, Thomas Anderson!",
      "*/",
      "",
      "console.log(greetingWithoutDefaultParameters());",
      "",
      "/* ",
      "  Hello, undefined!",
      "*/",
      "",
      "const greeting = (name = 'Anonymous') => `Hello, ${name}!`;",
      "",
      "console.log(greeting('Thomas Anderson'));",
      "",
      "/* ",
      "  Hello, Thomas Anderson!",
      "*/",
      "",
      "console.log(greeting());",
      "",
      "/* ",
      "  Hello, Anonymous!",
      "*/"
    ],
    "description": "default parameters"
  },

  "destructuring-assignment": {
    "prefix": "jsdestructuring-assignment",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const numbers = [1, 2, 3];",
      "",
      "const [num1, num2, num3] = numbers;",
      "",
      "console.log(num1, num2, num3);",
      "",
      "/* ",
      "  1 2 3",
      "*/",
      "",
      "const numbers1 = [1, 2, 3, 4, 5];",
      "",
      "const [nums1, nums2, ...nums] = numbers1;",
      "",
      "console.log(nums1, nums2, nums);",
      "",
      "/* ",
      "  1 2 [3, 4, 5]",
      "*/",
      "",
      "const movieObject = {",
      "  name: 'Matrix',",
      "  year: '1999' ",
      "};",
      "",
      "const { name, year } = movieObject;",
      "",
      "console.log(name);",
      "console.log(year);",
      "",
      "/* ",
      "  Matrix",
      "  1999",
      "*/"
    ],
    "description": "destructuring-assignment"
  },

  "do-while": {
    "prefix": "jsdo-while",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "let count = 0;",
      "let countdown = [];",
      "",
      "do {",
      "  countdown.push(count);",
      "  count--;",
      "} while (count > 0);",
      "",
      "console.log(countdown);",
      "",
      "/* ",
      "  [0]",
      "*/",
      "",
      "let count1 = 10;",
      "let countdown1 = [];",
      "",
      "do {",
      "  countdown1.push(count1);",
      "  count1--;",
      "} while (count1 >= 0);",
      "",
      "console.log(countdown1);",
      "",
      "/* ",
      "  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
      "*/",
      "",
    ],
    "description": "do-while"
  },

  "filter": {
    "prefix": "jsfilter",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const products = [",
      "  {",
      "    id: 1,",
      "    description: 'Iphone',",
      "    price: 699.00",
      "  },",
      "  {",
      "    id: 2,",
      "    description: 'Samsung',",
      "    price: 499.99",
      "  },",
      "  {",
      "    id: 3,",
      "    description: 'Pixel',",
      "    price: 339.99",
      "  }",
      "];",
      "",
      "const productsLess500 = products.filter(product => product.price < 500);",
      "",
      "console.log(productsLess500);",
      "  ",
      "/* ",
      "  [ ",
      "    { id: 2, description: 'Samsung', price: 499.99 },",
      "    { id: 3, description: 'Pixel', price: 339.99 } ",
      "  ]",
      "*/",
      "",
      "const productsMore500 = products.filter(product => product.price > 500);",
      "",
      "console.log(productsMore500);",
      "",
      "/* ",
      "  [ ",
      "    { id: 1, description: 'Iphone', price: 699 } ",
      "  ]",
      "*/",
      ""
    ],
    "description": "filter"
  },

  "for": {
    "prefix": "jsfor",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const movies = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "for (let i = 0; i < movies.length; i++) {",
      "  console.log(movies[i]);",
      "}",
      "",
      "/* ",
      "  Matrix",
      "  Star Wars",
      "  Pulp Fiction ",
      "*/",
      "",
    ],
    "description": "for"
  },

  "for-in": {
    "prefix": "jsfor-in",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const movies = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "for (const key in movies) {",
      "  console.log(key);",
      "}",
      "",
      "/* ",
      "  0",
      "  1",
      "  2",
      "*/",
      "",
      "movies.age = 18;",
      "",
      "for (const key in movies) {",
      "  console.log(key);",
      "}",
      "",
      "/* ",
      "  0",
      "  1",
      "  2",
      "  age",
      "*/",
      "",
      "const moviesObject = [",
      "  {",
      "    name: 'Matrix',",
      "    year: '1999'",
      "  },",
      "  {",
      "    name: 'Stars Wars',",
      "    year: '1977'",
      "  },",
      "  {",
      "    name: 'Pulp Fiction',",
      "    year: '1995'",
      "  }",
      "];",
      "",
      "for (const key in moviesObject) {",
      "  console.log(`\\${key}: \\${moviesObject[key].name}`);",
      "}",
      "",
      "/* ",
      "  0: Matrix",
      "  1: Stars Wars",
      "  2: Pulp Fiction",
      "*/",
      ""
    ],
    "description": "for-in"
  },

  "for-of": {
    "prefix": "jsfor-of",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const movies = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "for (const movie of movies) {",
      "  console.log(movie);",
      "}",
      "",
      "/* ",
      "  Matrix",
      "  Star Wars",
      "  Pulp Fiction",
      "*/",
      "",
      "movies.age = 18;",
      "",
      "console.log(movies);",
      "",
      "/* ",
      "  ['Matrix', 'Star Wars', 'Pulp Fiction', age: 18]",
      "*/",
      "",
      "for (const movie of movies) {",
      "  console.log(movie);",
      "}",
      "",
      "/* ",
      "  Matrix",
      "  Star Wars",
      "  Pulp Fiction",
      "*/",
      ""
    ],
    "description": "for-of"
  },

  "forEach": {
    "prefix": "jsforEach",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.forEach(function (currentValue, index, array) { }, thisValue);",
      "",
      "  currentValue - required",
      "  index - optional",
      "  array - optional",
      "  thisValue - optional ",
      "*/",
      "",
      "const numbers = [1, 2, 3, 4, 5];",
      "",
      "numbers.forEach(number => console.log(number * 2));",
      "",
      "/* ",
      "  2",
      "  4",
      "  6",
      "  8",
      "  10",
      "*/",
      "",
      "let numbersDouble = [];",
      "",
      "numbers.forEach(number => numbersDouble.push(number * 2));",
      "",
      "console.log(numbersDouble);",
      "",
      "/* ",
      "  [2, 4, 6, 8, 10]",
      "*/",
      "",
    ],
    "description": "forEach"
  },

  "from": {
    "prefix": "jsfrom",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.from(object, mapFunction, thisValue);",
      "",
      "  object - required",
      "  mapFunction - optional",
      "  thisValue - optional ",
      "*/",
      "",
      "const vowelsString = 'aeiou';",
      "",
      "const vowelsArray = Array.from(vowelsString);",
      "",
      "console.log(vowelsArray);",
      "",
      "/* ",
      "  ['a', 'e', 'i', 'o', 'u']",
      "*/",
      "",
      "const numbers = [1, 2, 3, 4, 5];",
      "",
      "const numbersDouble = Array.from(numbers, number => number * 2);",
      "",
      "console.log(numbersDouble);",
      "",
      "/* ",
      "  [2, 4, 6, 8, 10]",
      "*/",
      "",
      "const sequence = { length: 10 };  ",
      "",
      "const sequenceArray = Array.from(sequence, (value, index) => index);",
      "",
      "console.log(sequenceArray);  ",
      "",
      "/* ",
      "  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
      "*/",
      "",
      "",
      ""
    ],
    "description": "from"
  },

  "if": {
    "prefix": "jsif",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const number = -5;",
      "",
      "if (number < 0) {",
      "  console.log('Negative number');",
      "}",
      "",
      "/* ",
      "  Negative number",
      "*/",
      "",
    ],
    "description": "if"
  },

  "if-else": {
    "prefix": "jsif-else",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const hour = 12;",
      "",
      "let greeting = '';",
      "",
      "if (hour < 12) {",
      "  greeting = 'Good morning!';",
      "} else {",
      "  greeting = 'Good evening!';",
      "}",
      "",
      "console.log(greeting);",
      "",
      "/* ",
      "  Good evening!",
      "*/",
      ""
    ],
    "description": "if-else"
  },

  "if-else-if": {
    "prefix": "jsif-else-if",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const hour = 17;",
      "",
      "let greeting = '';",
      "",
      "if (hour >= 6 && hour < 12) {",
      "  greeting = 'Good morning!';",
      "} else if (hour >= 12 && hour < 18) {",
      "  greeting = 'Good afternoon!';",
      "} else {",
      "  greeting = 'Good evening!';",
      "}",
      "",
      "console.log(greeting);",
      "",
      "/* ",
      "  Good afternoon!",
      "*/",
      ""
    ],
    "description": "if-else-if"
  },

  "includes": {
    "prefix": "jsincludes",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  includes method is prototype to String and Array.",
      "",
      "  return true if the string or array contains the search, and false if not.",
      "",
      "  string.includes(search, start);",
      "  array.includes(search, start);",
      "",
      "  search - required",
      "  start - optional, default 0",
      "",
      "  The includes method is case sensitive.",
      " */",
      "",
      "const moviesString = 'Matrix, Star Wars and Pulp Fiction';",
      "",
      "console.log(moviesString.includes('Star Wars'));",
      "",
      "/* ",
      "  true",
      "*/",
      "",
      "console.log(moviesString.includes('star wars'));",
      "",
      "/* ",
      "  false",
      "*/",
      "",
      "console.log(moviesString.includes('Star Wars', 8));",
      "",
      "/* ",
      "  true",
      "*/",
      "",
      "console.log(moviesString.includes('Star Wars', 9));",
      "",
      "/* ",
      "  false",
      "*/",
      "",
      "const moviesArray = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "console.log(moviesArray.includes('Star Wars'));",
      "",
      "/* ",
      "  true",
      "*/",
      "",
      "console.log(moviesArray.includes('star wars'));",
      "",
      "/* ",
      "  false",
      "*/",
      "",
      "console.log(moviesArray.includes('Star Wars', 1));",
      "",
      "/* ",
      "  true",
      "*/",
      "",
      "console.log(moviesArray.includes('Star Wars', 2));",
      "",
      "/* ",
      "  false",
      "*/"
    ],
    "description": "includes"
  },

  "indexOf": {
    "prefix": "jsindexOf",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.indexOf returns the index of the FIRST occurrence of text in a string. ",
      "  Index start with 0.",
      "*/",
      "",
      "const string = 'When you look at the dark side, careful you must be. For the dark side looks back.';",
      "",
      "const position = string.indexOf('side');",
      "",
      "console.log(position);",
      "",
      "/* ",
      "  26",
      "*/",
      "",
      "/* ",
      "  string.indexOf return -1 if the text is not found.",
      "*/",
      "",
      "const otherPosition = string.indexOf('titenq');",
      "",
      "console.log(otherPosition);",
      "",
      "/* ",
      "  -1",
      "*/",
      "",
      "/* ",
      "  string.indexOf accept a second parameter as the starting position for the search.",
      "*/",
      "",
      "const startPosition = string.indexOf('side', 27);",
      "",
      "console.log(startPosition);",
      "",
      "/* ",
      "  66",
      "*/"
    ],
    "description": "indexOf"
  },

  "join": {
    "prefix": "jsjoin",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const bands = ['Led Zeppelin', 'Pink Floyd', 'Queen'];",
      "",
      "const bandsJoinComma = bands.join();",
      "",
      "console.log(bandsJoinComma);",
      "",
      "/* ",
      "  Led Zeppelin,Pink Floyd,Queen",
      "*/",
      "",
      "const bandsJoinCommaAndSpace = bands.join(', ');",
      "",
      "console.log(bandsJoinCommaAndSpace);",
      "",
      "/* ",
      "  Led Zeppelin, Pink Floyd, Queen",
      "*/",
      "",
      "const bandsJoinSpace = bands.join(' ');",
      "",
      "console.log(bandsJoinSpace);",
      "",
      "/* ",
      "  Led Zeppelin Pink Floyd Queen",
      "*/",
      "",
      "const bandsJoinDash = bands.join('-');",
      "",
      "console.log(bandsJoinDash);",
      "",
      "/* ",
      "  Led Zeppelin-Pink Floyd-Queen",
      "*/",
      "",
      "const bandsJoinDashAndSpaces = bands.join(' - ');",
      "",
      "console.log(bandsJoinDashAndSpaces);",
      "",
      "/* ",
      "  Led Zeppelin - Pink Floyd - Queen",
      "*/",
      ""
    ],
    "description": "join"
  },

  "lastIndexOf": {
    "prefix": "jslastIndexOf",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.lastIndexOf returns the index of the LAST occurrence of text in a string. ",
      "  Index start with 0.",
      "*/",
      "",
      "const string = 'When you look at the dark side, careful you must be. For the dark side looks back.';",
      "",
      "const position = string.lastIndexOf('side');",
      "",
      "console.log(position);",
      "",
      "/* ",
      "  66",
      "*/",
      "",
      "/* ",
      "  string.lastIndexOf return -1 if the text is not found.",
      "*/",
      "",
      "const otherPosition = string.indexOf('titenq');",
      "",
      "console.log(otherPosition);",
      "",
      "/* ",
      "  -1",
      "*/",
      "",
      "/* ",
      "  string.lastIndexOf accept a second parameter as the starting position for the search.",
      "*/",
      "",
      "const startPosition = string.indexOf('side', 67);",
      "",
      "console.log(startPosition);",
      "",
      "/* ",
      "  -1",
      "*/"
    ],
    "description": "lastIndexOf"
  },

  "length": {
    "prefix": "jslength",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  length property is prototype to String and Array.",
      "",
      "  In string returns the number of characters.",
      "  In array returns the number of elements.",
      "*/",
      "",
      "const movieString = 'Matrix';",
      "",
      "console.log(movieString.length);",
      "",
      "/* ",
      "  6",
      "*/",
      "",
      "const moviesArray = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "console.log(moviesArray.length);",
      "",
      "/* ",
      "  3",
      "*/",
      "",
      "moviesArray.length = 2;",
      "",
      "console.log(moviesArray);",
      "",
      "/* ",
      "  ['Matrix', 'Star Wars']",
      "*/",
      "",
      "console.log(moviesArray.length);",
      "",
      "/* ",
      "  2",
      "*/",
      "",
      "movieString.length = 3;",
      "",
      "console.log(movieString);",
      "",
      "/* ",
      "  Matrix",
      "*/",
      "",
      "console.log(movieString.length);",
      "",
      "/* ",
      "  6",
      "*/"
    ],
    "description": "length"
  },

  "map": {
    "prefix": "jsmap",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.map(function (currentValue, index, array) { }, thisValue);",
      "",
      "  currentValue - required",
      "  index - optional",
      "  array - optional",
      "  thisValue - optional ",
      "*/",
      "",
      "const numbers = [1, 2, 3, 4, 5];",
      "",
      "const numbersDouble = numbers.map((number) => {",
      "  return number * 2;",
      "});",
      "",
      "console.log(numbersDouble);",
      "",
      "/* ",
      "  [2, 4, 6, 8, 10]",
      "*/",
      "",
      "const numbersDouble1 = numbers.map(number => number * 2);",
      "",
      "console.log(numbersDouble1);",
      "",
      "/* ",
      "  [2, 4, 6, 8, 10]",
      "*/",
      "",
      "const movies = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "const moviesObject = movies.map((currentValue, index, array) => {",
      "  return {",
      "    'array': array,",
      "    'index': index,",
      "    'currentValue': currentValue",
      "  };",
      "});",
      "",
      "console.log(moviesObject);",
      "",
      "/* ",
      "  [",
      "    {",
      "      array: ['Matrix', 'Star Wars', 'Pulp Fiction'],",
      "      index: 0,",
      "      currentValue: 'Matrix'",
      "    },",
      "    {",
      "      array: ['Matrix', 'Star Wars', 'Pulp Fiction'],",
      "      index: 1,",
      "      currentValue: 'Star Wars'",
      "    },",
      "    {",
      "      array: ['Matrix', 'Star Wars', 'Pulp Fiction'],",
      "      index: 2,",
      "      currentValue: 'Pulp Fiction'",
      "    }",
      "  ]",
      "*/",
      "",
      "const words = ['think', 'learn', 'talk'];",
      "",
      "const wordsWithThisValue = words.map(function (word) {",
      "  return word + this;",
      "}, 'ing');",
      "",
      "console.log(wordsWithThisValue);",
      "",
      "/* ",
      "  ['thinking', 'learning', 'talking']",
      "*/",
      ""
    ],
    "description": "map"
  },

  "Math.ceil": {
    "prefix": "jsMath.ceil",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Math.ceil() function returns rounds a number up to the next largest integer.",
      "*/",
      "",
      "console.log(Math.ceil(1.9));",
      "",
      "/* ",
      "  2",
      "*/",
      "",
      "console.log(Math.ceil(1));",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "console.log(Math.ceil(-1.9));",
      "",
      "/* ",
      "  -1",
      "*/"
    ],
    "description": "Math.ceil"
  },

  "Math.floor": {
    "prefix": "jsMath.floor",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Math.floor() function returns the largest integer less than or equal to a given number.",
      "*/",
      "",
      "console.log(Math.floor(1.9));",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "console.log(Math.floor(1));",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "console.log(Math.floor(-1.1));",
      "",
      "/* ",
      "  -2",
      "*/"
    ],
    "description": "Math.floor"
  },

  "Math.max": {
    "prefix": "jsMath.max",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Math.max() function returns the largest-valued number passed into it, or NaN if any parameter isn't a number and can't be converted into one.",
      "*/",
      "",
      "console.log(Math.max(1, 2, 3));",
      "",
      "/* ",
      "  3",
      "*/",
      "",
      "console.log(Math.max(1, 'Matrix', 2, 3));",
      "",
      "/* ",
      "  NaN",
      "*/",
      "",
      "const numbersArray = [1, 2, 3];",
      "",
      "console.log(Math.max(numbersArray));",
      "",
      "/* ",
      "  NaN",
      "*/",
      "",
      "console.log(Math.max(...numbersArray));",
      "",
      "/* ",
      "  3",
      "*/",
      "",
      "const numbersString = '1, 2, 3';",
      "",
      "console.log(Math.max(numbersString));",
      "",
      "/* ",
      "  NaN",
      "*/"
    ],
    "description": "Math.max"
  },

  "Math.min": {
    "prefix": "jsMath.min",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Math.min() function returns the lowest-valued number passed into it, or NaN if any parameter isn't a number and can't be converted into one.",
      "*/",
      "",
      "console.log(Math.min(1, 2, 3));",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "console.log(Math.min(1, 'Matrix', 2, 3));",
      "",
      "/* ",
      "  NaN",
      "*/",
      "",
      "const numbersArray = [1, 2, 3];",
      "",
      "console.log(Math.min(numbersArray));",
      "",
      "/* ",
      "  NaN",
      "*/",
      "",
      "console.log(Math.min(...numbersArray));",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "const numbersString = '1, 2, 3';",
      "",
      "console.log(Math.min(numbersString));",
      "",
      "/* ",
      "  NaN",
      "*/"
    ],
    "description": "Math.min"
  },

  "Math.random": {
    "prefix": "jsMath.random",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Math.random() function returns the pseudo-random number in the range 0 to less than 1, 0 inclusive, 1 exclusive.",
      "*/",
      "",
      "console.log(Math.random());",
      "",
      "/* ",
      "  To pseudo-random numbers between 1 and 60",
      "*/",
      "",
      "console.log(Math.floor(Math.random() * 60) + 1);"
    ],
    "description": "Math.random"
  },

  "nullish coalescing": {
    "prefix": "jsnullish-coalescing",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "let counter = 0;",
      "",
      "console.log(counter || 1);",
      "",
      "/* ",
      "  1",
      "*/",
      "",
      "console.log(counter ?? 1);",
      "",
      "/* ",
      "  0",
      "*/",
      "",
      "let name = '';",
      "",
      "console.log(name || 'Thomas Anderson');",
      "",
      "/* ",
      "  Thomas Anderson",
      "*/",
      "",
      "console.log(name ?? 'Thomas Anderson');",
      "",
      "/* ",
      "  ''",
      "*/"
    ],
    "description": "nullish coalescing"
  },

  "optional chaining": {
    "prefix": "jsoptional-chaining",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const user = {",
      "  name: 'Thomas Anderson',",
      "  contacts: {",
      "    email: 'neo@matrix.com'",
      "  }",
      "};",
      "",
      "// const passwordWithoutOptionalChaining = user.social.email;",
      "/* ",
      "  Uncaught TypeError: Cannot read property 'email' of undefined",
      "*/",
      "",
      "const password = user.social?.email;",
      "",
      "console.log(password);",
      "",
      "/* ",
      "  undefined",
      "*/"
    ],
    "description": "optional chaining"
  },

  "reduce": {
    "prefix": "jsreduce",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.reduce(function (accumulator, currentValue, index, array) { }, initialValue);",
      "",
      "  accumulator - required",
      "  currentValue - required",
      "  index - optional",
      "  array - optional",
      "  initialValue - optional ",
      "*/",
      "",
      "const products = [",
      "  {",
      "    id: 1,",
      "    description: 'Iphone',",
      "    price: 699.00,",
      "  },",
      "  {",
      "    id: 2,",
      "    description: 'Samsung',",
      "    price: 499.99,",
      "  },",
      "  {",
      "    id: 3,",
      "    description: 'Pixel',",
      "    price: 339.99,",
      "  },",
      "];",
      "",
      "const productsSumPrice = products.reduce((acc, product) => {",
      "  return acc + product.price;",
      "}, 0);",
      "",
      "console.log(productsSumPrice);",
      "",
      "/* ",
      "  1538.98",
      "*/",
      "",
      "const productsSumPrice1 = products.reduce((acc, product) => acc + product.price, 0);",
      "",
      "console.log(productsSumPrice1);",
      "",
      "/* ",
      "  1538.98",
      "*/",
      "",
    ],
    "description": "reduce"
  },

  "replace": {
    "prefix": "jsreplace",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.replace method replace the FIRST ocurrence.",
      "*/",
      "",
      "const greeting = 'Hello World!';",
      "",
      "const replace = greeting.replace('World', 'TitenQ');",
      "",
      "console.log(replace);",
      "",
      "/* ",
      "  Hello TitenQ!",
      "*/",
      "",
      "const greeting1 = 'Hello World! ...World!';",
      "",
      "const replace1 = greeting1.replace('World', 'TitenQ');",
      "",
      "console.log(replace1);",
      "",
      "/* ",
      "  Hello TitenQ! ...World!",
      "*/",
      "",
      "// string.replace method is case sensitive",
      "",
      "const replace2 = greeting.replace('world', 'TitenQ');",
      "",
      "console.log(replace2);",
      "",
      "/* ",
      "  Hello World! // nothing changed",
      "*/",
      "",
      "// To replace case insensitive, use a regular expression with an /i flag.",
      "",
      "const replace3 = greeting.replace(/world/i, 'TitenQ');",
      "",
      "console.log(replace3);",
      "",
      "/* ",
      "  Hello TitenQ!",
      "*/",
      "",
      "// To replace all matches, use a regular expression with a /g flag.",
      "",
      "const replace4 = greeting1.replace(/world/ig, 'TitenQ');",
      "",
      "console.log(replace4);",
      "",
      "/* ",
      "  Hello TitenQ! ...TitenQ!",
      "*/"
    ],
    "description": "replace"
  },

  "rest-parameters": {
    "prefix": "jsrest-parameters",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "function sum(...numbers) {",
      "  let result = 0;",
      "",
      "  numbers.forEach(number => result += number);",
      "",
      "  return result;",
      "}",
      "",
      "console.log(sum(1));",
      "console.log(sum(1, 2));",
      "console.log(sum(1, 2, 3));",
      "console.log(sum(1, 2, 3, 4));",
      "console.log(sum(1, 2, 3, 4, 5));",
      "",
      "/* ",
      "  1",
      "  3",
      "  6",
      "  10",
      "  15// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "function sum(...numbers) {",
      "  let result = 0;",
      "",
      "  numbers.forEach(number => result += number);",
      "",
      "  return result;",
      "}",
      "",
      "console.log(sum(1));",
      "console.log(sum(1, 2));",
      "console.log(sum(1, 2, 3));",
      "console.log(sum(1, 2, 3, 4));",
      "console.log(sum(1, 2, 3, 4, 5));",
      "",
      "/* ",
      "  1",
      "  3",
      "  6",
      "  10",
      "  15",
      "*/",
      "",
      "const sum1 = (...numbers) => numbers.reduce((acc, curr) => acc + curr, 0); ",
      "",
      "console.log(sum1(1));",
      "console.log(sum1(1, 2));",
      "console.log(sum1(1, 2, 3));",
      "console.log(sum1(1, 2, 3, 4));",
      "console.log(sum1(1, 2, 3, 4, 5));",
      "",
      "/* ",
      "  1",
      "  3",
      "  6",
      "  10",
      "  15",
      "*/",
      "*/"
    ],
    "description": "rest-parameters"
  },

  "slice": {
    "prefix": "jsslice",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  slice method is prototype to String and Array.",
      "",
      "  return the extracted parts in a new string.",
      "",
      "  string.slice(start, end);",
      "  array.slice(start, end);",
      "",
      "  start - optional, default 0, inclusive",
      "  end - optional, default string.length - 1, exclusive, to string",
      "  end - optional, default array.length - 1, exclusive, to array",
      " */",
      "",
      "const moviesString = 'Matrix, Star Wars and Pulp Fiction';",
      "",
      "console.log(moviesString.slice());",
      "",
      "/* ",
      "  Matrix, Star Wars and Pulp Fiction",
      "*/",
      "",
      "console.log(moviesString.slice(0));",
      "",
      "/* ",
      "  Matrix, Star Wars and Pulp Fiction",
      "*/",
      "",
      "console.log(moviesString.slice(8));",
      "",
      "/* ",
      "  Star Wars and Pulp Fiction",
      "*/",
      "",
      "console.log(moviesString.slice(8, 17));",
      "",
      "/* ",
      "  Star Wars",
      "*/",
      "",
      "const moviesArray = ['Matrix', 'Star Wars', 'Pulp Fiction'];",
      "",
      "console.log(moviesArray.slice());",
      "",
      "/* ",
      "  ['Matrix', 'Star Wars', 'Pulp Fiction']",
      "*/",
      "",
      "console.log(moviesArray.slice(0, 2));",
      "",
      "/* ",
      "  ['Matrix', 'Star Wars']",
      "*/",
      "",
      "console.log(moviesArray.slice(1));",
      "",
      "/* ",
      "  ['Star Wars', 'Pulp Fiction']",
      "*/",
      "",
      "console.log(moviesArray.slice(1, 2));",
      "",
      "/* ",
      "  ['Star Wars']",
      "*/"
    ],
    "description": "slice"
  },

  "split": {
    "prefix": "jssplit",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  Return an Array, containing the splitted values.",
      "",
      "  string.split(separator, limit);",
      "",
      "  separator - optional",
      "  limit - optional",
      " */",
      "",
      "const string = 'When you look at the dark side, careful you must be. For the dark side looks back.';",
      "",
      " console.log(string.split());",
      "",
      " /* ",
      "  ['When you look at the dark side, careful you must be. For the dark side looks back.']",
      " */",
      "",
      " console.log(string.split(''));",
      "",
      " /* ",
      "  ['W', 'h', 'e', 'n', ' ', 'y', 'o', 'u', ' ', 'l', 'o', 'o', 'k', ' ', 'a', 't', ' ', 't', 'h', 'e', ' ', 'd', 'a', 'r', 'k', ' ', 's', 'i', 'd', 'e', ',', ' ', 'c', 'a', 'r', 'e', 'f', 'u', 'l', ' ', 'y', 'o', 'u', ' ', 'm', 'u', 's', 't', ' ', 'b', 'e', '.', ' ', 'F', 'o', 'r', ' ', 't', 'h', 'e', ' ', 'd', 'a', 'r', 'k', ' ', 's', 'i', 'd', 'e', ' ', 'l', 'o', 'o', 'k', 's', ' ', 'b', 'a', 'c', 'k', '.']",
      " */",
      "",
      " console.log(string.split(' '));",
      "",
      " /* ",
      "  ['When', 'you', 'look', 'at', 'the', 'dark', 'side,', 'careful', 'you', 'must', 'be.', 'For', 'the', 'dark', 'side', 'looks', 'back.']",
      " */",
      "",
      " console.log(string.split(' ', 5));",
      "",
      " /* ",
      "  ['When', 'you', 'look', 'at', 'the']",
      " */"
    ],
    "description": "split"
  },

  "spread-operator": {
    "prefix": "jsspread-operator",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const sum = (num1, num2, num3) => num1 + num2 + num3;",
      "",
      "console.log(sum(1, 2, 3));",
      "",
      "/* ",
      "  6",
      "*/",
      "",
      "const numbers = [1, 2, 3];",
      "",
      "console.log(sum(...numbers));",
      "",
      "/* ",
      "  6",
      "*/",
      "",
      "const even = [2, 4, 6, 8];",
      "const odd = [1, 3, 5, 7, 9];",
      "",
      "const evenAndOdd = [...even, ...odd];",
      "",
      "console.log(evenAndOdd);",
      "",
      "/* ",
      "  [2, 4, 6, 8, 1, 3, 5, 7, 9]",
      "*/",
      "",
      "const withoutSpread = [even, odd];",
      "",
      "console.log(withoutSpread);",
      "",
      "/* ",
      "  [[2, 4, 6, 8], [1, 3, 5, 7, 9]]",
      "*/",
      "",
      "console.log(Math.max(evenAndOdd));",
      "",
      "/* ",
      "  NaN",
      "*/",
      "",
      "console.log(Math.max(...evenAndOdd));",
      "",
      "/* ",
      "  9",
      "*/"
    ],
    "description": "spread-operator"
  },

  "substr": {
    "prefix": "jssubstr",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.substr(start, length);",
      "",
      "  start - required",
      "  length - optional",
      "*/",
      "",
      "const string = 'Hello World!';",
      "",
      "const string1 = string.substr(0, 5);",
      "",
      "console.log(string1);",
      "",
      "/* ",
      "  Hello",
      "*/",
      "",
      "const string2 = string.substr(0);",
      "",
      "console.log(string2);",
      "",
      "/* ",
      "  Hello World!",
      "*/",
      "",
      "const string3 = string.substr(-6);",
      "",
      "console.log(string3);",
      "",
      "/* ",
      "  World!",
      "*/",
      "",
      "const string4 = string.substr(-6, 3);",
      "",
      "console.log(string4);",
      "",
      "/* ",
      "  Wor",
      "*/"
    ],
    "description": "substr"
  },

  "substring": {
    "prefix": "jssubstring",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  array.substring(start, end);",
      "",
      "  start - required - inclusive",
      "  end - optional - exclusive",
      "*/",
      "",
      "const string = 'Hello World!';",
      "",
      "const string1 = string.substring(6, 11);",
      "",
      "console.log(string1);",
      "",
      "/* ",
      "  World",
      "*/",
      "",
      "const string2 = string.substring(6);",
      "",
      "console.log(string2);",
      "",
      "/* ",
      "  World!",
      "*/"
    ],
    "description": "substring"
  },

  "switch": {
    "prefix": "jsswitch",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const persons = ['Neo', 'Trinity', 'Morpheus'];",
      "",
      "const person = 1;",
      "",
      "switch (person) {",
      "  case 0:",
      "    console.log(`Hi, ${persons[0]}!`);",
      "    break;",
      "",
      "  case 1:",
      "    console.log(`Hi, ${persons[1]}!`);",
      "    break;",
      "",
      "  case 2:",
      "    console.log(`Hi, ${persons[2]}!`);",
      "",
      "  default:",
      "    console.log(`Hi, Anonymous!`);",
      "}",
      "",
      "/* ",
      "  Hi, Trinity!",
      "*/",
      "",
      "const day = 'saturday';",
      "",
      "switch (day) {",
      "  case 'sunday':",
      "  case 'saturday':",
      "    console.log('weekend');",
      "    break;",
      "",
      "  case 'monday':",
      "  case 'tuesday':",
      "  case 'wednesday':",
      "  case 'thursday':",
      "  case 'friday':",
      "    console.log('weekday');",
      "    break;",
      "",
      "  default:",
      "    console.log('not day');",
      "}",
      "",
      "/* ",
      "  weekend",
      "*/"
    ],
    "description": "switch"
  },

  "toLowerCase": {
    "prefix": "jstoLowerCase",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const greeting = 'Hello World!';",
      "",
      "const greetingToLowerCase = greeting.toLowerCase();",
      "",
      "console.log(greetingToLowerCase);",
      "",
      "/* ",
      "  hello world!",
      "*/"
    ],
    "description": "toLowerCase"
  },

  "toUpperCase": {
    "prefix": "jstoUpperCase",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "const greeting = 'Hello World!';",
      "",
      "const greetingToUpperCase = greeting.toUpperCase();",
      "",
      "console.log(greetingToUpperCase);",
      "",
      "/* ",
      "  HELLO WORLD!",
      "*/"
    ],
    "description": "toUpperCase"
  },

  "trim": {
    "prefix": "jstrim",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.trim removes whitespace from both sides of a string.",
      " */",
      "",
      " const string = '   Hello World! ';",
      "",
      " console.log(string.trim(string));",
      "",
      " /* ",
      "  Hello World!",
      " */"
    ],
    "description": "trim"
  },

  "trimLeft": {
    "prefix": "jstrimLeft",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.trimLeft removes whitespace from left sides of a string.",
      " */",
      "",
      " const string = '   Hello World!';",
      "",
      " console.log(string.trimLeft(string));",
      "",
      " /* ",
      "  Hello World!",
      " */"
    ],
    "description": "trimLeft"
  },

  "trimRight": {
    "prefix": "jstrimRight",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "/* ",
      "  string.trimRight removes whitespace from right sides of a string.",
      " */",
      "",
      " const string = 'Hello World!    ';",
      "",
      " console.log(string.trimRight(string));",
      "",
      " /* ",
      "  Hello World!",
      " */"
    ],
    "description": "trimRight"
  },

  "while": {
    "prefix": "jswhile",
    "body": [
      "$0// Submitted by: TitenQ <titenq@gmail.com>",
      "",
      "let count = 10;",
      "let countdown = [];",
      "",
      "while (count >= 0) {",
      "  countdown.push(count);",
      "  count--;",
      "}",
      "",
      "console.log(countdown);",
      "",
      "/* ",
      "  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]",
      "*/",
      "",
    ],
    "description": "while"
  },
}
